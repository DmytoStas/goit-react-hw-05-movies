{"version":3,"file":"static/js/877.452e90f7.chunk.js","mappings":"+PAIMA,EAAY,IAAIC,EAAAA,EAsCtB,EApCa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6GAEKR,EAAUS,gBAAgBJ,GAF/B,OAERK,EAFQ,OAGdN,EAAQM,EAAKP,MAHC,gDAKdQ,QAAQC,IAAI,6BAAZ,MALc,yDAAH,qDASfJ,GACD,GAAE,CAACH,KAGF,+BACE,wBACGF,EAAKU,KAAI,SAAAC,GACR,IAAQC,EAAsCD,EAAtCC,GAAIC,EAAkCF,EAAlCE,aAAcC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,UAC1BC,EAAO,0CAAsCH,GACnD,OACE,0BACGA,IAAgB,gBAAKI,IAAKD,EAASE,IAAKJ,KACzC,wBAAKA,KACL,uCAAeC,OAHRH,EAMZ,OAIR,C,uGCxCoBd,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,KACnBqB,SAAW,gCAAgC,KAE3CC,aACE,sNAAsN,KAExNC,gBAAkB,CAChBC,QAAS,CACPC,cAAc,UAAD,OAAYC,KAAKJ,cAC9B,eAAgB,oBAHF,CA2DlB,OA3DkB,oEAOlB,oGACqBK,MAAM,GAAD,OACnBD,KAAKL,SADc,oBAEtBK,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,kGAPkB,IAOlB,yDAaA,WAAeC,GAAf,uFACqBL,MAAM,GAAD,OACnBD,KAAKL,SADc,8BACgBW,EAAMC,QAC5CP,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,mGAbA,IAaA,gEAaA,WAAsBG,GAAtB,uFACqBP,MAAM,GAAD,OACnBD,KAAKL,SADc,iBACGa,GACzBR,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,mGAbA,IAaA,gEAaA,WAAsBG,GAAtB,uFACqBP,MAAM,GAAD,OACnBD,KAAKL,SADc,iBACGa,EADH,YAEtBR,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,mGAbA,IAaA,gEAaA,WAAsBG,GAAtB,uFACqBP,MAAM,GAAD,OACnBD,KAAKL,SADc,iBACGa,EADH,YAEtBR,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,mGAbA,MAaA,EAjEmB/B,E","sources":["components/Cast/Cast.jsx","services/moviesAPIService.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport MoviesAPIService from 'services/moviesAPIService';\n\nconst moviesAPI = new MoviesAPIService();\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const data = await moviesAPI.getMovieCredits(movieId);\n        setCast(data.cast);\n      } catch (e) {\n        console.log('Error fetching movie cast:', e);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {cast.map(person => {\n          const { id, profile_path, name, character } = person;\n          const pathIMG = `https://image.tmdb.org/t/p/w154/${profile_path}`;\n          return (\n            <li key={id}>\n              {profile_path && <img src={pathIMG} alt={name} />}\n              <h3>{name}</h3>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n","export default class MoviesAPIService {\n  BASE_URL = 'https://api.themoviedb.org/3/';\n\n  ACCESS_TOKEN =\n    'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlNTNmNDQ0YzhjOTIzYjEwNGFiMzkzZDlmZmY0NzM3NSIsInN1YiI6IjY0NzUyYTBiYzI4MjNhMDBjNDIxNDA3OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.wJ9yqsOyNyT3w7GuPXqWWQIZSuAsjemKs2vv1aIwq24';\n\n  REQUEST_OPTIONS = {\n    headers: {\n      Authorization: `Bearer ${this.ACCESS_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  async getTrends() {\n    const resp = await fetch(\n      `${this.BASE_URL}trending/all/day`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getQuery(query) {\n    const resp = await fetch(\n      `${this.BASE_URL}search/movie?query=${query.trim()}`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieDetails(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieCredits(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}/credits`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieReviews(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}/reviews`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n}\n"],"names":["moviesAPI","MoviesAPIService","useState","cast","setCast","movieId","useParams","useEffect","fetchCast","getMovieCredits","data","console","log","map","person","id","profile_path","name","character","pathIMG","src","alt","BASE_URL","ACCESS_TOKEN","REQUEST_OPTIONS","headers","Authorization","this","fetch","resp","ok","Error","json","query","trim","movieID"],"sourceRoot":""}