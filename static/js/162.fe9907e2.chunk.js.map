{"version":3,"file":"static/js/162.fe9907e2.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.jsx","pages/MoviesDetails/MoviesDetails.jsx","services/moviesAPIService.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst MovieCard = ({ movieDetails }) => {\n  console.log(movieDetails);\n  const {\n    title,\n    original_title,\n    vote_average,\n    overview,\n    genres,\n    poster_path,\n    release_date,\n  } = movieDetails;\n\n  const pathIMG = `https://image.tmdb.org/t/p/w342/${poster_path}`;\n  const scorePercentage = Math.round((vote_average / 10) * 100);\n  const movieGenres =\n    genres && genres.length >= 1\n      ? genres.map(genre => genre.name).join(', ')\n      : 'No genres';\n\n  return (\n    <div>\n      <img src={pathIMG} alt={title} />\n      <h1>\n        {title || original_title} ({release_date.slice(0, 4)})\n      </h1>\n      <p>User Score: {scorePercentage}%</p>\n      <h2>Overview</h2>\n      <p>{overview}</p>\n      <h3>Genres</h3>\n      <p>{movieGenres}</p>\n    </div>\n  );\n};\n\nMovieCard.propTypes = {\n  movieDetails: PropTypes.shape({\n    title: PropTypes.string,\n    original_title: PropTypes.string,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ),\n    poster_path: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { useEffect, useRef, useState, Suspense } from 'react';\nimport MovieCard from '../../components/MovieCard';\nimport MoviesAPIService from 'services/moviesAPIService';\n\nconst moviesAPI = new MoviesAPIService();\n\nconst MovieDetails = () => {\n  const [details, setDetails] = useState({});\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n  const firstMountRef = useRef(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const data = await moviesAPI.getMovieDetails(movieId);\n        setDetails(data);\n      } catch (e) {\n        console.log('Error fetching movie details:', e);\n      }\n    };\n\n    if (firstMountRef.current) {\n      fetchMovieDetails();\n      return;\n    }\n\n    firstMountRef.current = true;\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>Go back</Link>\n      {firstMountRef.current && <MovieCard movieDetails={details} />}\n      <p>Additional information</p>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","export default class MoviesAPIService {\n  BASE_URL = 'https://api.themoviedb.org/3/';\n\n  ACCESS_TOKEN =\n    'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlNTNmNDQ0YzhjOTIzYjEwNGFiMzkzZDlmZmY0NzM3NSIsInN1YiI6IjY0NzUyYTBiYzI4MjNhMDBjNDIxNDA3OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.wJ9yqsOyNyT3w7GuPXqWWQIZSuAsjemKs2vv1aIwq24';\n\n  REQUEST_OPTIONS = {\n    headers: {\n      Authorization: `Bearer ${this.ACCESS_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  async getTrends() {\n    const resp = await fetch(\n      `${this.BASE_URL}trending/all/day`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getQuery(query) {\n    const resp = await fetch(\n      `${this.BASE_URL}search/movie?query=${query.trim()}`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieDetails(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieCredits(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}/credits`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieReviews(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}/reviews`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n}\n"],"names":["movieDetails","console","log","title","original_title","vote_average","overview","genres","poster_path","release_date","pathIMG","scorePercentage","Math","round","movieGenres","length","map","genre","name","join","src","alt","slice","moviesAPI","MoviesAPIService","useState","details","setDetails","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","firstMountRef","useEffect","fetchMovieDetails","getMovieDetails","data","current","Link","to","Suspense","fallback","BASE_URL","ACCESS_TOKEN","REQUEST_OPTIONS","headers","Authorization","this","fetch","resp","ok","Error","json","query","trim","movieID"],"sourceRoot":""}