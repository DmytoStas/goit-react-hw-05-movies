{"version":3,"file":"static/js/122.9d852496.chunk.js","mappings":"+PAIMA,EAAY,IAAIC,EAAAA,EAwCtB,EAtCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,6GAEER,EAAUS,gBAAgBJ,GAF5B,OAEXK,EAFW,OAGjBN,EAAWM,EAAKC,SAHC,gDAKjBC,QAAQC,IAAI,gCAAZ,MALiB,yDAAH,qDASlBL,GACD,GAAE,CAACH,KAGF,+BACE,wBACsB,IAAnBF,EAAQW,OACPX,EAAQY,KAAI,SAAAC,GACV,IAAQC,EAAwBD,EAAxBC,GAAIC,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,QACpB,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EAKZ,KAED,uDAKT,C,uGC1CoBhB,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,KACnBmB,SAAW,gCAAgC,KAE3CC,aACE,sNAAsN,KAExNC,gBAAkB,CAChBC,QAAS,CACPC,cAAc,UAAD,OAAYC,KAAKJ,cAC9B,eAAgB,oBAHF,CA2DlB,OA3DkB,oEAOlB,oGACqBK,MAAM,GAAD,OACnBD,KAAKL,SADc,oBAEtBK,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,kGAPkB,IAOlB,yDAaA,WAAeC,GAAf,uFACqBL,MAAM,GAAD,OACnBD,KAAKL,SADc,8BACgBW,EAAMC,QAC5CP,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,mGAbA,IAaA,gEAaA,WAAsBG,GAAtB,uFACqBP,MAAM,GAAD,OACnBD,KAAKL,SADc,iBACGa,GACzBR,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,mGAbA,IAaA,gEAaA,WAAsBG,GAAtB,uFACqBP,MAAM,GAAD,OACnBD,KAAKL,SADc,iBACGa,EADH,YAEtBR,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,mGAbA,IAaA,gEAaA,WAAsBG,GAAtB,uFACqBP,MAAM,GAAD,OACnBD,KAAKL,SADc,iBACGa,EADH,YAEtBR,KAAKH,iBAHT,WACQK,EADR,QAMYC,GANZ,sBAOU,IAAIC,MAPd,gCAUSF,EAAKG,QAVd,mGAbA,MAaA,EAjEmB7B,E","sources":["components/Reviews/Reviews.jsx","services/moviesAPIService.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport MoviesAPIService from 'services/moviesAPIService';\n\nconst moviesAPI = new MoviesAPIService();\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const data = await moviesAPI.getMovieReviews(movieId);\n        setReviews(data.results);\n      } catch (e) {\n        console.log('Error fetching movie reviews:', e);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {reviews.length !== 0 ? (\n          reviews.map(review => {\n            const { id, author, content } = review;\n            return (\n              <li key={id}>\n                <h3>Author: {author}</h3>\n                <p>{content}</p>\n              </li>\n            );\n          })\n        ) : (\n          <p>There is no reviews yet.</p>\n        )}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;\n","export default class MoviesAPIService {\n  BASE_URL = 'https://api.themoviedb.org/3/';\n\n  ACCESS_TOKEN =\n    'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlNTNmNDQ0YzhjOTIzYjEwNGFiMzkzZDlmZmY0NzM3NSIsInN1YiI6IjY0NzUyYTBiYzI4MjNhMDBjNDIxNDA3OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.wJ9yqsOyNyT3w7GuPXqWWQIZSuAsjemKs2vv1aIwq24';\n\n  REQUEST_OPTIONS = {\n    headers: {\n      Authorization: `Bearer ${this.ACCESS_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  async getTrends() {\n    const resp = await fetch(\n      `${this.BASE_URL}trending/all/day`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getQuery(query) {\n    const resp = await fetch(\n      `${this.BASE_URL}search/movie?query=${query.trim()}`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieDetails(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieCredits(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}/credits`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n\n  async getMovieReviews(movieID) {\n    const resp = await fetch(\n      `${this.BASE_URL}movie/${movieID}/reviews`,\n      this.REQUEST_OPTIONS\n    );\n\n    if (!resp.ok) {\n      throw new Error();\n    }\n\n    return resp.json();\n  }\n}\n"],"names":["moviesAPI","MoviesAPIService","useState","reviews","setReviews","movieId","useParams","useEffect","fetchReviews","getMovieReviews","data","results","console","log","length","map","review","id","author","content","BASE_URL","ACCESS_TOKEN","REQUEST_OPTIONS","headers","Authorization","this","fetch","resp","ok","Error","json","query","trim","movieID"],"sourceRoot":""}